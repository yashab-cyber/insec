name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [ '1.70', stable ]
        go: [ '1.19', '1.20' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache Go dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Rust dependencies
      run: |
        cd agent/insec-agent
        cargo fetch

    - name: Run Rust tests
      run: |
        cd agent/insec-agent
        cargo test --verbose

    - name: Run Rust lints
      run: |
        cd agent/insec-agent
        cargo clippy -- -D warnings
        cargo fmt --all -- --check

    - name: Install Go dependencies
      run: |
        cd server
        go mod download

    - name: Run Go tests
      run: |
        cd server
        go test -v -race -coverprofile=coverage.out ./...

    - name: Run Go lints
      run: |
        cd server
        go vet ./...
        go fmt ./...

    - name: Install UI dependencies
      run: |
        cd ui
        npm ci

    - name: Run UI tests
      run: |
        cd ui
        npm test -- --coverage --watchAll=false

    - name: Run UI lints
      run: |
        cd ui
        npm run lint

    - name: Build all components
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./server/coverage.out,./ui/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run safety check for Python dependencies
      run: |
        pip install safety
        safety check

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Build release binaries
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh --release

    - name: Create release archives
      run: |
        mkdir -p release-artifacts

        # Package agent
        cd agent/insec-agent
        tar -czf ../../release-artifacts/insec-agent-linux-x64.tar.gz target/release/insec-agent

        # Package server
        cd ../../server
        tar -czf ../release-artifacts/insec-server-linux-x64.tar.gz insec-server

        # Package UI
        cd ../ui
        npm run build
        tar -czf ../release-artifacts/insec-ui.tar.gz build/

        # Create checksums
        cd ../release-artifacts
        sha256sum *.tar.gz > checksums.txt

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: insec-release-${{ github.event.release.tag_name }}
        path: release-artifacts/

  deploy-demo:
    name: Deploy Demo Environment
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'release' && github.event.release.prerelease == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to demo environment
      run: |
        echo "Demo deployment would go here"
        # Add actual deployment steps for your demo environment
